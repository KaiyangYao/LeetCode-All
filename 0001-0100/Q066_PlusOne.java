/**
 * 2023/07/06
 */

/**
 * O(n) time | O(1) space
 */
class Solution066 {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        int i;
        for (i = n - 1; i >= 0; i--) {
            if (digits[i] != 9)
                break;
        }
        if (i >= 0) {
            digits[i] += 1;
            for (int j = i + 1; j < n; j++) {
                digits[j] = 0;
            }
            return digits;
        } else {
            int[] arr = new int[n + 1];
            arr[0] = 1;
            return arr;
        }
    }
}

/**
 * 思路
 * 
 * 当我们对数组 digits 加一时，我们只需要关注 digits 的末尾出现了多少个 9 即可。我们可以考虑如下的三种情况：
 * 
 * 如果 digits 的末尾没有 9, 例如 [1,2,3]，那么我们直接将末尾的数加一，得到 [1,2,4]并返回；
 * 
 * 如果 digits 的末尾有若干个 9, 例如 [1,2,3,9,9]，那么我们只需要找出从末尾开始的第一个不为 9 的元素,即 3，将该元素加一，得到
 * [1,2,4,9,9]。随后将末尾的 9 全部置零，得到 [1,2,4,0,0]并返回。
 * 
 * 如果 digits 的所有元素都是 9，例如 [9,9,9,9,9]，那么答案为 [1,0,0,0,0,0]。我们只需要构造一个长度比 digits 多
 * 1 的新数组，将首元素置为 1，其余元素置为 0 即可。
 * 
 * 算法
 * 
 * 我们只需要对数组 digits 进行一次逆序遍历，找出第一个不为 9 的元素，将其加一并将后续所有元素置零即可。如果 digits 中所有的元素均为
 * 9，那么对应着「思路」部分的第三种情况，我们需要返回一个新的数组。
 */